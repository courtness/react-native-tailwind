$grid_columns: 12;
$grid_gutter: 8px;
$grid_padding: (
  sm: 16px,
  xs: 16px
);

.grid {
  @include xs {
    width: calc(100% - (#{map-get($grid_padding, "xs")} * 2));
  }

  width: calc(100% - (#{map-get($grid_padding, "sm")} * 2));

  //

  width: 100%;
  position: relative;
  margin: 0 auto;
  display: grid;
  grid-template-columns: repeat($grid_columns, minmax(0, 1fr));
  grid-gap: $grid_gutter / 2 $grid_gutter;
}

@mixin generate-classes($columns: $grid_columns, $breakpoint_key: "") {
  @if $breakpoint_key != "" {
    @for $i from 1 through $columns {
      .#{$breakpoint_key}:grid-end-#{$i} {
        grid-column-end: span $i;
      }

      .#{$breakpoint_key}:grid-start-#{$i} {
        grid-column-start: $i;
      }
    }
  } @else {
    @for $i from 1 through $columns {
      .grid-end-#{$i} {
        grid-column-end: span $i;
      }

      .grid-start-#{$i} {
        grid-column-start: $i;
      }
    }
  }
}

@include generate-classes($grid_columns);

@include sm {
  @include generate-classes($grid_columns, "sm");
}

@include xs {
  @include generate-classes($grid_columns, "xs");
}

@function grid-end($count) {
  @return calc((100vw / #{$grid_columns}) * #{$count});
}
